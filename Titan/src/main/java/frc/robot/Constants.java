// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;
import edu.wpi.first.wpilibj.kinematics.DifferentialDriveKinematics;
/**
 * The Constants class provides a convenient place for teams to hold robot-wide numerical or boolean
 * constants.  This class should not be used for any other purpose.  All constants should be
 * declared globally (i.e. public static).  Do not put anything functional in this class.
 *
 * <p>It is advised to statically import this class (or one of its inner classes) wherever the
 * constants are needed, to reduce verbosity.
 */
public class Constants {

    public static final class DriveConstants {
    
        public static final double kTrackwidthMeters = 0.6731;
        public static final DifferentialDriveKinematics kDriveKinematics = new DifferentialDriveKinematics(kTrackwidthMeters);
    
        // Characterization
        public static final double ksVolts = 0.24; //0.22;
        public static final double kvVoltSecondsPerMeter = 1.98;
        public static final double kaVoltSecondsSquaredPerMeter = 0.2;
        public static final double kPDriveVel = 6.5;
    }
    
    public static final class OIConstants {

    }
    
    public static final class AutoConstants {
        public static final double kMaxSpeedMetersPerSecond = 3.95;
        public static final double kMaxAccelerationMetersPerSecondSquared = 3;

        // https://docs.wpilib.org/en/latest/docs/software/advanced-controls/trajectories/ramsete.html
        public static final double kRamseteB = 2;
        public static final double kRamseteZeta = 0.7;
    } 

    public enum AnglePositionAndPower 
    { 
        GREENZONE(1,300,0.5),    
        YELLOWZONE(5,305, 1.0), 
        BLUEZONE(10,310, 1.5), 
        REDZONE(25,315, 2.0),
        REINTROZONE(30,325,0),
        SHOOTINGZONE(40,330, 2.5); 

        private final int SetPoint;
        private final int SetPowerPoint;
        private final double SetDistanceFromStart; 

        AnglePositionAndPower(int Point, int Power, double Distance) {
            this.SetPoint = Point;
            this.SetPowerPoint = Power;
            this.SetDistanceFromStart = Distance;
        }

        public int GetAnglePosition() { 
            return this.SetPoint; 
        } 
        public int GetPower() {
            return this.SetPowerPoint;
        }
        public double GetDistance() {
            return this.SetDistanceFromStart;
        }
    }

}

