// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.commands;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.subsystems.DriveSubsystem;

/**
 *
 */
public class DriveAngle extends CommandBase {

    private final DriveSubsystem m_driveSubsystem;

    private double StartAngle = 0;
    private double RotateAngle = 0;
    private double TargetAngle = 0;
    private double Correction = 0;
    private double Error = 0;
    private static double MinSpeed = 0.15;
    private static double kP = .003;  //1/45 to start.  1/25



    public DriveAngle(DriveSubsystem subsystem, Double RotateToAngle ) {

        m_driveSubsystem = subsystem;
        addRequirements(m_driveSubsystem);

        RotateAngle = RotateToAngle;
        m_driveSubsystem.resetEncoders();
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        
        StartAngle = m_driveSubsystem.getGyroAngle();
        TargetAngle = m_driveSubsystem.getGyroAngle() + RotateAngle;
        m_driveSubsystem.TankDriveControl(0,0);  //Ensure that the robot stops or stopping.
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        Error = TargetAngle - m_driveSubsystem.getGyroAngle();
        //Correction = MinSpeed + Math.abs(kP * Error);
        Correction =  (kP * Error);
        // Drives forward continuously at half speed, using the encoders to stabilize the heading
        //What if moving backwards?

        //Limit Rotation Speed
        if(Correction > 0.65 ) { 
            Correction = 0.65;
        } 
        else if (Correction < 0.65) {
            Correction = -0.65;
        }

        System.out.print("Start " + StartAngle);
        System.out.print(" TargetAngle " + TargetAngle);
        System.out.print(" Error " + Error);
        System.out.print(" Correction " + Correction);
        System.out.print(" Angle Rate " + m_driveSubsystem.getAngleRate());
        System.out.println(" CurrentAngle " + m_driveSubsystem.getGyroAngle());
        
        m_driveSubsystem.TankDriveControl(-Correction, Correction);

    }


    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {

    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        if (Math.abs(TargetAngle - m_driveSubsystem.getGyroAngle()) <= 1) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean runsWhenDisabled() {
        return false;
    }
}
