// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


//import frc.robot.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import frc.robot.Constants;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
//import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.Counter;
//import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
//import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.DigitalInput;

/**
 *
 */
public class FuelDeliverySubSystem extends SubsystemBase {

    private final int PCMDeviceID = 0;
    private Compressor compressor;
    private PowerDistributionPanel powerDistributionPanel;

    private DoubleSolenoid hippoDoubleSolenoid;
    private Solenoid fuelReleaseSolenoid;

    private Spark ConveyorSpeedController;
    //private Spark ShooterBottomMotor;
    private Spark ShooterAdjustor;
    public Counter ShooterAngleCounter;
    //private DigitalInput ShooterLimitExtend;
    private DigitalInput ShooterLimitRetract;

    private DigitalInput ConveyorActivate;

    private Spark HippoMotorSpeedController;

    private double HippoIntakeSpeed = .45;
    private double HippoMotorStop = 0;
    private int HippoMotorStallCount = 0;
  
    // 0.43 speed
    //private double ShooterTopMotorSpeed = 0.65;//0.50; //Start .42
    //private double ShooterBottomMotorSpped = 0.65; //0.60; //Start 0.42  //Start .46
  
    private double ConveyorMotorSpeed = .75;
    //private double ShooterSpeed = 0.50;
  
    //private Ultrasonic fuelDetectorUltrasonic;
    public int FuelCount = 0;
    public boolean FuelAtIntakeDetected = false;
    
    private enum ConveyorState {
        Auto,
        Idle,
        Up,
        Down
    }

    private enum ShooterAngleDirection {
        Up,
        Down,
        Stop
    }

    private ShooterAngleDirection ShooterMovingDirection = ShooterAngleDirection.Stop;
    private double ShooterLastCounter;
    public double ShooterCalculatedCounter;

    public Constants.AnglePositionAndPower SelectedPosition;

    private ConveyorState ConveyorStatus = ConveyorState.Idle;

    /**
    *
    */
    public FuelDeliverySubSystem() {

        compressor = new Compressor(PCMDeviceID);
        addChild("Compressor",compressor);
        

        powerDistributionPanel = new PowerDistributionPanel(1);
        addChild("PowerDistributionPanel",powerDistributionPanel);

        hippoDoubleSolenoid = new DoubleSolenoid(0, 1);
        addChild("HippoDoubleSolenoid",hippoDoubleSolenoid);

        fuelReleaseSolenoid = new Solenoid(0,3);
        addChild("FuelReleaseSolenoid ",fuelReleaseSolenoid);

        //hippoSpeedController = new PWMVictorSPX(0);
        //addChild("HippoSpeedController",hippoSpeedController);
        //hippoSpeedController.setInverted(false);

        //fuelDetectorUltrasonic = new Ultrasonic(8, 9);
        //addChild("FuelDetectorUltrasonic",fuelDetectorUltrasonic);

        //fuelDetectorUltrasonic.setAutomaticMode(true);
        
        //fuelDetectorUltrasonic.setDistanceUnits(Unit.kInches);
        //fuelDetectorUltrasonic.setEnabled(true);
        //fuelDetectorUltrasonic.set

        //ShooterTopMotor = new Spark(0);
        //ShooterBottomMotor = new Spark(1);
        ShooterAdjustor = new Spark(1);

        ShooterAngleCounter = new Counter(7);
        addChild("Shooter Angle Counter ", ShooterAngleCounter);

        ShooterLimitRetract = new DigitalInput(6);
        //ShooterLimitRetract = new DigitalInput(7);
    
        ConveyorActivate = new DigitalInput(9);

        ConveyorSpeedController = new Spark(2);
        HippoMotorSpeedController = new Spark(3);

        SelectedPosition = Constants.AnglePositionAndPower.REINTROZONE;

        //Shuffleboard.getTab("Shooting Challenges").addPersistent("Shooter Calculated Counter", ShooterCalculatedCounter);


    }
    //public void initDefaultCommand() {
    //    // Set the default command for a subsystem here.
    //    setDefaultCommand(new FuelSystemDefault());
    //}

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        //ShooterEncoder.getRate();
        //if (DetectFuelAtFeeder() < 4.2) {
        //    FuelAtIntakeDetected = true;
        //    //ConveyorUp();
        //    //HippoRetractMech();
        //    //HippoMotorOn();
        //    ConveyorStatus = ConveyorState.Auto;
        //    
        //    //FuelCount = FuelCount +1;
        //} else if (ConveyorStatus == ConveyorState.Auto && DetectFuelAtFeeder() >= 4.2   ) {
        //    ConveyorOff();
        //    HippoMotorOff();
        //    ConveyorStatus = ConveyorState.Idle;
        //}

        if(!ConveyorActivate.get()) {
            FuelAtIntakeDetected = true;
            ConveyorUp();
            HippoRetractMech();
            HippoMotorOn();
            ConveyorStatus = ConveyorState.Auto;

        }else if (ConveyorStatus == ConveyorState.Auto) {
            ConveyorOff();
            HippoMotorOff();
            ConveyorStatus = ConveyorState.Idle;

        }

        //Shuffleboard.getTab("Shooting Challenges").addPersistent("Shooter Minimum Limit", ShooterPostitionMinLimitHit());

        
        if (!ShooterLimitRetract.get() && ShooterMovingDirection != ShooterAngleDirection.Up ) {
            //System.out.println("Limit Pressed");
            ShooterPostitionMinLimitHit();
        }

        if (ShooterLastCounter != ShooterAngleCounter.get()) {
            if (ShooterMovingDirection == ShooterAngleDirection.Up){
                ShooterCalculatedCounter = ShooterCalculatedCounter + Math.abs(ShooterAngleCounter.get() - ShooterLastCounter);
                ShooterLastCounter = ShooterAngleCounter.get();

            } else if (ShooterMovingDirection == ShooterAngleDirection.Down) {
                ShooterCalculatedCounter = ShooterCalculatedCounter - Math.abs(ShooterAngleCounter.get() - ShooterLastCounter);
                ShooterLastCounter = ShooterAngleCounter.get();

            } else {
                //Should not get here.
            }

            //System.out.print("Calculated Shooter Position "); 
            //System.out.println(ShooterCalculatedCounter);
        }


        //Hippo Stall Detection / Handling
        if (powerDistributionPanel.getCurrent(1) > 5)
        {
            if(HippoMotorStallCount > 100)
            {
                HippoMotorOff();
                HippoRetractMech();
                HippoMotorStallCount = 0;
            }
            HippoMotorStallCount = HippoMotorStallCount +1;
        }


        //System.out.print("Angle Counter ");
        //System.out.print(ShooterAngleCounter.get());
        //System.out.print(" Counter ");
        //System.out.println(ShooterCalculatedCounter);

        //if (ShooterLimitRetract.get()) {
        //    ShooterPostitionMinLimitHit();
        //}

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void HippoExtendMech() {
        //System.out.println("Hippo Mech Extend ");
        hippoDoubleSolenoid.set(Value.kReverse);
    }
  
    public void HippoRetractMech() {
        hippoDoubleSolenoid.set(Value.kForward);
  
    }

    public void HippoMotorOn() {
        HippoMotorSpeedController.set(HippoIntakeSpeed);
        HippoMotorStallCount = 0;
    }

    public void HippoMotorOff() {
        HippoMotorSpeedController.set(HippoMotorStop);
        HippoMotorStallCount = 0;
    }

    public void HippoMotorReverseOn() {
        HippoMotorSpeedController.set(-1*HippoIntakeSpeed);
        HippoMotorStallCount = 0;
    }
  
    //public void HippoMotorReverse() {
  
        // Protect the gear box
        //final double currentSpeed = hippoSpeedController.get();
        
        //if (currentSpeed > 0.03) {
            //hippoSpeedController.set(HippoMotorStop);
        //}
        //else if (currentSpeed < -0.03) {
            //hippoSpeedController.set(HippoMotorStop);
        //}
        //else {
            //hippoSpeedController.set(HippoIntakeSpeed * -1);
        //}
  
    //}
  
    //public void ActivateShooter() {
    //    compressor.stop();
    //    shooterTopMotor.set(ShooterTopMotorSpeed);
    //    shooterBottomMotor.set(ShooterBottomMotorSpped);
    //    shooterVictor.set(ControlMode.PercentOutput, ShooterTopMotorSpeed);
    //    cameraForwardLight.set(Relay.Value.kForward);
    //}
  
    /**
     * Adjust Shooter Speed
     *
     * @param topMotor  Speed in range [-1,1]
     * @param bottomMotor Speed in range [-1,1]
     */
    //public void AdjustShooterSpeed(double topMotor, double bottomMotor){
    //    shooterTopMotor.set(topMotor);
    //    shooterBottomMotor.set(bottomMotor);
    //    shooterVictor.set(ControlMode.PercentOutput, ShooterTopMotorSpeed);
    //
    //}
  
    //public void StopShooter() {
    //    PopCornRetract();
    //    shooterTopMotor.set(HippoMotorStop);
    //    shooterBottomMotor.set(HippoMotorStop);
    //    shooterVictor.set(ControlMode.PercentOutput, HippoMotorStop);
  
    //    compressor.start();
    //    cameraForwardLight.set(Relay.Value.kOff);
    //}
  
    public void ConveyorUp() {
        ConveyorSpeedController.set(ConveyorMotorSpeed);
    }
    public void ConveyorOff() {
        ConveyorSpeedController.set(0);
    }
  
    public void ConveyorDown() {
        ConveyorSpeedController.set(-1 * ConveyorMotorSpeed);
    }
  
    public void fuelReleaseSolenoidRetract() {
        fuelReleaseSolenoid.set(false);
        System.out.print("Fuel Release Solenoid ");
        System.out.println(fuelReleaseSolenoid.get());
  
    }
    public void fuelReleaseSolenoidExtend() {
        fuelReleaseSolenoid.set(true);
        System.out.print("Fuel Release Solenoid ");
        System.out.println(fuelReleaseSolenoid.get());
  
    }

    public void ShooterOn() {
        //ShooterTopMotor.set(ShooterSpeed);
        //ShooterBottomMotor.set(0); //Keep Stopped

    }

    public void ShooterOff() {
        //ShooterTopMotor.set(0);
        //ShooterBottomMotor.set(0);
    }

    //public double DetectFuelAtFeeder() {
    //    return fuelDetectorUltrasonic.getRangeInches();
    //}

    public void ShooterAngleIncrease() {
        ShooterAdjustor.set(1);
        ShooterAngleCounter.setReverseDirection(false);
        ShooterMovingDirection = ShooterAngleDirection.Up;

    }
    public void ShooterAngleDecrease() {
        ShooterAdjustor.set(-1);
        ShooterAngleCounter.setReverseDirection(true);
        ShooterMovingDirection = ShooterAngleDirection.Down;

    }
    public void ShooterAngleHold() {
        ShooterAdjustor.set(0);
        ShooterMovingDirection = ShooterAngleDirection.Stop;

    }

    public double ShooterPosition() {
        //return ShooterAngleCounter.get();
        return ShooterCalculatedCounter;
    }

    public void ShooterPositionReset() {
        ShooterAngleCounter.reset();

    }

    public void ShooterPositionMaxLimitHit() {
        ShooterAdjustor.set(0);
        //ShooterAdjustor.setPosition(2000);
        ShooterMovingDirection = ShooterAngleDirection.Stop;


    }
    public void ShooterPostitionMinLimitHit() {
        ShooterAngleCounter.reset();
        ShooterAdjustor.set(0);

        ShooterMovingDirection = ShooterAngleDirection.Stop;
        ShooterLastCounter=0;
        ShooterCalculatedCounter=0;
    }
    


}

