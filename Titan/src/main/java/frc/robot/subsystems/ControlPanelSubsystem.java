// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


import frc.robot.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.PWMVictorSPX;
import edu.wpi.first.wpilibj.SpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.util.Color;
import com.revrobotics.ColorSensorV3;
import com.revrobotics.ColorMatchResult;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import com.revrobotics.ColorMatch;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class ControlPanelSubsystem extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private PWMVictorSPX controlPanelSpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_VictorSPX controlPanelMotorTalon;

    private double ControlPanelRotationSpeed = 0.35;
    private double ControlPanelRotationSpeedStop = 0;

    private final I2C.Port i2cPort = I2C.Port.kOnboard;
    private final ColorSensorV3 m_colorSensor = new ColorSensorV3(i2cPort);    
    
    private final ColorMatch m_colorMatcher = new ColorMatch();

    private final Color kBlackTarget = ColorMatch.makeColor(0.05, 0.05, 0.05);
    private final Color kBlueTarget = ColorMatch.makeColor(0.143, 0.427, 0.429);
    private final Color kGreenTarget = ColorMatch.makeColor(0.197, 0.561, 0.240);
    private final Color kRedTarget = ColorMatch.makeColor(0.561, 0.232, 0.114);
    private final Color kYellowTarget = ColorMatch.makeColor(0.361, 0.524, 0.113);
    private final Color kWhiteTarget = ColorMatch.makeColor(0.561, 0.561, 0.561);

    public String CurrentColourString;
    public String StartColour = "";
    public int StartColourCount = 0;
    public boolean StartColourDetected =true;
    public String CurrentColour = "";
    public int StartColourDetectedCount = 0;

    /**
    *
    */
    public ControlPanelSubsystem() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
controlPanelSpeedController = new PWMVictorSPX(3);
 addChild("ControlPanelSpeedController",controlPanelSpeedController);
 controlPanelSpeedController.setInverted(false);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        controlPanelMotorTalon = new WPI_VictorSPX(31);

        controlPanelMotorTalon.setNeutralMode(NeutralMode.Brake);

        m_colorMatcher.addColorMatch(kBlueTarget);
        m_colorMatcher.addColorMatch(kGreenTarget);
        m_colorMatcher.addColorMatch(kRedTarget);
        m_colorMatcher.addColorMatch(kYellowTarget);
        m_colorMatcher.addColorMatch(kBlackTarget);
        m_colorMatcher.addColorMatch(kWhiteTarget);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        Color detectedColor = m_colorSensor.getColor();
        double IR = m_colorSensor.getIR();
        int proximity = m_colorSensor.getProximity();
        ColorMatchResult match = m_colorMatcher.matchClosestColor(detectedColor);

        if (match.color == kBlueTarget) {
            CurrentColourString = "Blue";
        } else if (match.color == kRedTarget) {
            CurrentColourString = "Red";
        } else if (match.color == kGreenTarget) {
            CurrentColourString = "Green";
        } else if (match.color == kYellowTarget) {
            CurrentColourString = "Yellow";
        } else if (match.color == kWhiteTarget) {
            CurrentColourString = "White";
        } else if (match.color == kBlackTarget) {
            CurrentColourString = "Black";
        } else {
            CurrentColourString = "Unknown";
        }
    
        SmartDashboard.putNumber("Proximity", proximity);
        SmartDashboard.putNumber("Red", detectedColor.red);
        SmartDashboard.putNumber("Green", detectedColor.green);
        SmartDashboard.putNumber("Blue", detectedColor.blue);
        SmartDashboard.putNumber("IR", IR);
        SmartDashboard.putString("Calculated Colour", CurrentColourString);
    
        SmartDashboard.putNumber("R", m_colorSensor.getRed());
        SmartDashboard.putNumber("G", m_colorSensor.getGreen());
        SmartDashboard.putNumber("B", m_colorSensor.getBlue());
    
        SmartDashboard.putString("StartColour", StartColour);
        SmartDashboard.putNumber("StartColourDetectedCount", StartColourDetectedCount);
    
        SmartDashboard.putString("FMS COLOUR", DriverStation.getInstance().getGameSpecificMessage());
    
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void ControlPanelRotateCounterClockwise() {
        if (controlPanelMotorTalon.get() != 0) {
          controlPanelMotorTalon.set(ControlPanelRotationSpeedStop);
        }
        else {
          controlPanelMotorTalon.set(ControlPanelRotationSpeed);
        }
  }
  
  public void ControlPanelRotateSpeedAdjust(double multiplier) {
      controlPanelMotorTalon.set(ControlPanelRotationSpeed * multiplier);
  }
  
  
  public void ControlPanelRotateClockwise() {
      if (controlPanelMotorTalon.get() != 0) {
          controlPanelMotorTalon.set(ControlPanelRotationSpeedStop);    
      }
      else {
          controlPanelMotorTalon.set(-1 * ControlPanelRotationSpeed);
      }
  }
  
  public void ControlPanelRotationStop() {
      controlPanelMotorTalon.set(ControlPanelRotationSpeedStop);
  }
  
  public double GetControlPanelSpeed() {
      return controlPanelMotorTalon.get();
  }
  
  public String GetGameData() {
      String gameDataReturn;
      String gameData;
      gameData = DriverStation.getInstance().getGameSpecificMessage();
      if(gameData.length() > 0) {
  
          switch (gameData.charAt(0))
          {
              case 'B' :
              gameDataReturn = "Blue";
              break;
  
              case 'G' :
              gameDataReturn = "Green";
              break;
              
              case 'R' :
              gameDataReturn = "Red";
              break;
              
              case 'Y' :
              gameDataReturn = "Yellow";
              break;
              
              default :
              System.out.println("[][][][][][][][][][] ERROR GAME DATA [][][][][][][][][][]][][[]");
              gameDataReturn = "ERROR";
              break;
          }
      } else {
          gameDataReturn = "NoDataYet";
      }
  
      return gameDataReturn;
  }
  

}

