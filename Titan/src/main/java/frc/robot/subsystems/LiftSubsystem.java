// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


//import frc.robot.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Spark;
//import edu.wpi.first.wpilibj.SpeedController;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Relay;


/**
 *
 */
public class LiftSubsystem extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Spark liftWinchSpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private double LiftSpeed = 0.45; //REAL GAME NOTE Should be 1. Set for slow testing.
    private double LiftStopSpeed = 0;

    private Relay ElevatorRelay;

    /**
    *
    */
    public LiftSubsystem() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        liftWinchSpeedController = new Spark(4);
        addChild("LiftWinchSpeedController",liftWinchSpeedController);
        liftWinchSpeedController.setInverted(false);

        //One PWM - Y Split Cable to 2 Sparks
        //liftWinchSpeedController = new Spark(5);
        //addChild("LiftWinchSpeedController",liftWinchSpeedController);
        //liftWinchSpeedController.setInverted(false);


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        ElevatorRelay = new Relay(0);
        ElevatorRelay.set(Relay.Value.kOff);

    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void LiftMotorsUp() {
        liftWinchSpeedController.set(LiftSpeed);
    }
    public void LiftMotorsDown() {
        liftWinchSpeedController.set(-1 * LiftSpeed);
    }
    
    public void LiftMotorsStop() {
        liftWinchSpeedController.set(LiftStopSpeed);
    }
    
    public void ElevatorUp() {
          //elevatorMotors.set(ElevatorUpSpeed);
          ElevatorRelay.set(Relay.Value.kForward);
    
    }
    
    public void ElevatorDown() {
        //elevatorMotors.set(ElevatorDownSpeed);
        ElevatorRelay.set(Relay.Value.kReverse);
    
    }
    
    public void ElevatorStop() {
        //elevatorMotors.set(ElevatorStopSpeed);
        ElevatorRelay.set(Relay.Value.kOff);
    
    }

    
}

